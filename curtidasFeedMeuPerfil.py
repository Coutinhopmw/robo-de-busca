import time
import logging
import os
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

# --- CONFIGURA√á√ïES ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

INSTAGRAM_USERNAME = "proescola.com.br"
INSTAGRAM_PASSWORD = "Pro35c0l@2025"

# ============================ A√á√ÉO NECESS√ÅRIA AQUI (EDITAR) ============================
# 1. Defina o n√∫mero m√°ximo de posts que voc√™ quer curtir nesta sess√£o.
#    (Recomenda√ß√£o: comece com um valor baixo, como 15 ou 20)
MAX_CURTIDAS_SESSAO = 15

# 2. Defina o intervalo de tempo (em segundos) para a pausa entre as curtidas.
#    (Recomenda√ß√£o de seguran√ßa: M√çNIMO de 30 segundos)
PAUSA_MINIMA_ENTRE_CURTIDAS = 30
PAUSA_MAXIMA_ENTRE_CURTIDAS = 90
# =======================================================================================


# --- FUN√á√ïES ---

def perform_login(driver, wait, username, password):
    """Realiza o login na conta do Instagram."""
    logging.info("üîë Realizando login...")
    driver.get("https://www.instagram.com/accounts/login/")
    try:
        wait.until(EC.presence_of_element_located((By.NAME, "username"))).send_keys(username)
        driver.find_element(By.NAME, "password").send_keys(password + Keys.RETURN)
        wait.until(EC.url_contains("instagram.com"))
        logging.info("‚úÖ Login realizado com sucesso.")
        # Lida com pop-ups p√≥s-login
        for _ in range(2):
            try:
                WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH, "//*[text()='Agora n√£o' or text()='Not Now' or text()='Dispensar']"))).click()
                logging.info("Pop-up de notifica√ß√£o/salvamento fechado.")
            except: pass
    except Exception as e:
        logging.error(f"‚ùå Erro inesperado durante o login: {e}")
        return False
    return True

def curtir_posts_do_feed(driver, wait):
    """Rola o feed e curte as postagens que ainda n√£o foram curtidas."""
    logging.info("‚ù§Ô∏è Iniciando processo de curtidas no feed...")
    curtidas_nesta_sessao = 0
    posts_processados = set() # Guarda os links dos posts j√° vistos para n√£o reprocessar

    # Loop principal: continua at√© atingir o limite de curtidas
    while curtidas_nesta_sessao < MAX_CURTIDAS_SESSAO:
        try:
            # Encontra todos os artigos (posts) vis√≠veis na tela
            # A tag <article> √© um bom identificador para um post no feed
            posts_visiveis = wait.until(EC.presence_of_all_elements_located((By.TAG_NAME, "article")))
            
            if not posts_visiveis:
                logging.warning("Nenhum post encontrado na tela. Verificando...")
                time.sleep(5)
                continue

            for post in posts_visiveis:
                # Pega o link do post como um identificador √∫nico
                try:
                    link_post = post.find_element(By.XPATH, ".//a[contains(@href, '/p/')]").get_attribute('href')
                    if link_post in posts_processados:
                        continue # Pula se j√° vimos este post
                except:
                    continue # Se n√£o conseguir ID, pula o post

                # A L√ìGICA PRINCIPAL: Tenta encontrar o bot√£o de "Curtir" (cora√ß√£o n√£o preenchido)
                try:
                    # O seletor procura pelo SVG com o aria-label espec√≠fico de "Curtir"
                    botao_curtir = post.find_element(By.XPATH, ".//svg[@aria-label='Curtir']")
                    
                    # Se encontrou o bot√£o, significa que o post ainda n√£o foi curtido
                    botao_curtir.click()
                    curtidas_nesta_sessao += 1
                    logging.info(f"   ‚ù§Ô∏è Post curtido! ({curtidas_nesta_sessao}/{MAX_CURTIDAS_SESSAO})")

                    # Pausa de seguran√ßa longa e aleat√≥ria AP√ìS curtir
                    pausa = random.uniform(PAUSA_MINIMA_ENTRE_CURTIDAS, PAUSA_MAXIMA_ENTRE_CURTIDAS)
                    logging.info(f"   ‚è∏Ô∏è Pausando por {pausa:.1f} segundos...")
                    time.sleep(pausa)

                except NoSuchElementException:
                    # Se n√£o encontrou o bot√£o "Curtir", significa que o post j√° foi curtido (o bot√£o agora √© "Descurtir")
                    # ou √© um an√∫ncio sem o bot√£o padr√£o. Em ambos os casos, apenas ignoramos.
                    pass
                
                finally:
                    # Marca o post como processado para n√£o tentar de novo
                    posts_processados.add(link_post)

                # Verifica se j√° atingiu o limite da sess√£o
                if curtidas_nesta_sessao >= MAX_CURTIDAS_SESSAO:
                    break
            
            # Se o loop de posts terminou e ainda n√£o atingimos o limite, rola a p√°gina
            if curtidas_nesta_sessao < MAX_CURTIDAS_SESSAO:
                logging.info("   ‚è¨ Rolando o feed para encontrar novos posts...")
                driver.execute_script("window.scrollBy(0, window.innerHeight * 1.5);") # Rola 1.5x a altura da tela
                time.sleep(3) # Pausa para o conte√∫do carregar

        except TimeoutException:
            logging.warning("N√£o foram encontrados novos posts para carregar. Encerrando a rolagem.")
            break
        except Exception as e:
            logging.error(f"‚ùå Um erro ocorreu durante a rolagem/curtida: {e}")
            break
            
    return curtidas_nesta_sessao

# --- FLUXO PRINCIPAL ---
if __name__ == "__main__":
    driver = None
    try:
        options = Options()
        options.add_argument("--start-maximized")
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        wait = WebDriverWait(driver, 10) # Wait mais curto, pois o feed carrega r√°pido
        
        if perform_login(driver, wait, INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD):
            curtidas_feitas = curtir_posts_do_feed(driver, wait)
            logging.info(f"\nüéâ Processo conclu√≠do! {curtidas_feitas} post(s) foram curtidos nesta sess√£o.")

    except Exception as final_e:
        logging.critical(f"‚ùå Um erro inesperado ocorreu no fluxo principal: {final_e}")
    finally:
        if driver:
            driver.quit()
            logging.info("Navegador fechado.")