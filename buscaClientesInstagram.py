import pandas as pd
import time
import logging
import os
import random
import csv # Import movido para o topo do arquivo
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# --- CONFIGURA√á√ïES ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

INSTAGRAM_USERNAME = "proescola.com.br"
INSTAGRAM_PASSWORD = "Pro35c0l@2025"

PALAVRAS_CHAVE = [
    "sal√£o de beleza", "sal√£o de est√©tica", "sal√£o de cabeleireiro", "sal√£o feminino",
    "sal√£o masculino", "barbearia", "nail designer", "espa√ßo de beleza", "espa√ßo est√©tico",
    "centro de est√©tica", "cl√≠nica de est√©tica", "studio de beleza", "studio de sobrancelhas",
    "studio de maquiagem", "spa de beleza", "spa urbano", "sal√£o de unhas",
    "ateli√™ de beleza", "espa√ßo de autocuidado", "est√∫dio de beleza"
]

# Garante que o diret√≥rio de sa√≠da exista
dir_saida = "buscaClientesInstagram"
if not os.path.exists(dir_saida):
    os.makedirs(dir_saida)

ARQUIVO_SAIDA = os.path.join(dir_saida, "perfis_comerciais_encontrados.csv")


# --- FUN√á√ïES ---

def perform_login(driver, wait, username, password):
    """Realiza o login na conta do Instagram."""
    logging.info("üîë Realizando login...")
    driver.get("https://www.instagram.com/accounts/login/")
    try:
        wait.until(EC.presence_of_element_located((By.NAME, "username"))).send_keys(username)
        driver.find_element(By.NAME, "password").send_keys(password + Keys.RETURN)
        wait.until(EC.url_contains("instagram.com"))
        logging.info("‚úÖ Login realizado com sucesso.")
        try:
            WebDriverWait(driver, 7).until(
                EC.element_to_be_clickable((By.XPATH, "//*[text()='Agora n√£o' or text()='Not Now']"))
            ).click()
            logging.info("Pop-up 'Agora n√£o' fechado.")
        except: pass
    except Exception as e:
        logging.error(f"‚ùå Erro inesperado durante o login: {e}")
        return False
    return True

def buscar_e_coletar_perfis(driver, wait, keywords):
    """Pede ajuda para o clique inicial e depois busca e coleta os perfis."""
    perfis_encontrados = set() # Usar um set para usernames garante que n√£o haver√° duplicatas

    # L√≥gica de resumo: l√™ o CSV existente para n√£o adicionar duplicatas
    if os.path.exists(ARQUIVO_SAIDA):
        try:
            df_existente = pd.read_csv(ARQUIVO_SAIDA)
            perfis_encontrados.update(df_existente['username'].tolist())
            logging.info(f"Encontrados {len(perfis_encontrados)} perfis j√° salvos no CSV. Novos perfis ser√£o adicionados.")
        except Exception as e:
            logging.warning(f"N√£o foi poss√≠vel ler o arquivo CSV existente. Come√ßando do zero. Erro: {e}")

    # Cria o arquivo CSV com cabe√ßalho se ele n√£o existir
    if not os.path.exists(ARQUIVO_SAIDA):
        with open(ARQUIVO_SAIDA, mode='w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(["username", "nome_completo", "subtitulo", "palavra_chave_origem"])

    input("\n" + "="*60 +
          "\n   A√á√ÉO NECESS√ÅRIA: Por favor, clique no √≠cone de 'Pesquisa' (a lupa) na\n" +
          "   janela do navegador que foi aberta.\n\n" +
          "   Ap√≥s o painel de busca aparecer, volte aqui e pressione ENTER para continuar...\n" +
          "="*60 + "\n")
    logging.info("‚úÖ Intera√ß√£o manual recebida. Assumindo o controle...")

    SELETOR_LINHA_RESULTADO = (By.XPATH, "//a[contains(@class, '_a6hd') and .//img]")
    KEYWORDS_INVALIDAS = ['liked_by', 'comments', 'terms', 'privacy', 'locations', 'lite', 'explore', 'direct', 'accounts', 'legal']

    for keyword in keywords:
        logging.info(f"\nüîé Buscando pela palavra-chave: '{keyword}'")
        try:
            search_box = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@aria-label='Entrada da pesquisa']")))
            search_box.send_keys(Keys.CONTROL + "a")
            search_box.send_keys(Keys.DELETE)
            time.sleep(1)
            search_box.send_keys(keyword)
            
            logging.info("‚è≥ Aguardando resultados...")
            time.sleep(5)

            resultados = wait.until(EC.presence_of_all_elements_located(SELETOR_LINHA_RESULTADO))
            logging.info(f"   ‚úÖ Encontrados {len(resultados)} resultados v√°lidos para '{keyword}'.")

            for resultado in resultados:
                try:
                    href = resultado.get_attribute('href')
                    username = href.strip('/').split('/')[-1]

                    # --- Valida√ß√£o e Verifica√ß√£o de Duplicatas ---
                    if not username or ' ' in username or len(username) < 3: continue
                    if any(kw in username.lower() for kw in KEYWORDS_INVALIDAS): continue
                    if username in perfis_encontrados: continue
                    # -----------------------------------------------

                    spans = resultado.find_elements(By.TAG_NAME, 'span')
                    textos = [s.text.strip() for s in spans if s.text.strip()]
                    
                    nome_completo = textos[0] if textos else ""
                    subtitulo = textos[1] if len(textos) > 1 else ""
                    
                    # =================== L√ìGICA DE SALVAMENTO CORRIGIDA ===================
                    # Agora salva se encontrar o username, mesmo que outras infos estejam vazias.
                    if username:
                        perfis_encontrados.add(username) # Adiciona ao set para evitar duplicatas na mesma sess√£o
                        logging.info(f"      -> Coletado: {username} ({nome_completo})")

                        # Salva imediatamente no CSV
                        with open(ARQUIVO_SAIDA, mode='a', encoding='utf-8', newline='') as f:
                            writer = csv.writer(f)
                            writer.writerow([username, nome_completo, subtitulo, keyword])
                    # ====================================================================

                except Exception as e_inner:
                    # Loga o erro ao processar uma linha espec√≠fica, mas n√£o para o script
                    logging.warning(f"   ‚ö†Ô∏è Erro ao processar um resultado: {e_inner}")
                    continue
            
            pausa = random.uniform(3, 7)
            logging.info(f"   ‚è∏Ô∏è Pausando por {pausa:.1f} segundos antes da pr√≥xima busca...")
            time.sleep(pausa)

        except Exception as e:
            logging.error(f"‚ùå Falha ao processar a palavra-chave '{keyword}'. Erro: {e}")
            continue
    
    return perfis_encontrados

# --- FLUXO PRINCIPAL ---
if __name__ == "__main__":
    driver = None
    try:
        options = Options()
        options.add_argument("--start-maximized")
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        wait = WebDriverWait(driver, 20)
        
        if perform_login(driver, wait, INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD):
            perfis = buscar_e_coletar_perfis(driver, wait, PALAVRAS_CHAVE)
            
            logging.info(f"\n‚úÖ SUCESSO! A busca foi conclu√≠da. Total de perfis √∫nicos no set: {len(perfis)}")
            logging.info(f"Os dados foram salvos em tempo real em '{ARQUIVO_SAIDA}'")

    except Exception as final_e:
        logging.critical(f"‚ùå Um erro inesperado ocorreu no fluxo principal: {final_e}")
    finally:
        if driver:
            driver.quit()
            logging.info("Navegador fechado.")